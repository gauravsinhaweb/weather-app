{"version":3,"sources":["Svg/footer.svg","Ui/Wi/Footer.js","Svg/bottom.svg","Ui/Wi/Bottom.js","Svg/Fog.svg","Ui/Wi/Thunderstorm.js","Svg/noresult.png","Ui/Wi/Noresult.js","Ui/Html.jsx","Ui/Wi/Geoloc.jsx","App.js","reportWebVitals.js","index.js"],"names":["Img","className","src","Logo","width","height","Bottom","Thunderstorm","Ts","Noresult","Result","Html","useState","location","setLocation","city","setCity","country","setCountry","weather","setWeather","sunrise","setSunrise","sunset","setSunset","name","setName","hours","date","Date","getHours","minutes","getMinutes","seconds","getSeconds","sr","substr","ss","Month","getMonth","Weekday","getDay","today","getDate","getFullYear","time","useEffect","a","url","fetch","response","json","resJson","main","sys","description","fetchUrl","value","type","onChange","e","target","placeholder","Footer","Math","round","temp","pressure","feels_like","lon","setLon","lat","setLat","render","fetchingPosition","position","coords","latitude","longitude","error","getCurrentPosition","message","App","to","exact","path","component","Geoloc","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.48656e23.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/footer.da2f300f.svg\";","import React from \"react\";\r\nimport Logo from \"../../Svg/footer.svg\";\r\nimport \"./Wi.css\";\r\n\r\nfunction Img() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <img src={Logo} width=\"460\" height=\"200\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Img;\r\n","export default __webpack_public_path__ + \"static/media/bottom.2c988092.svg\";","import React from \"react\";\r\nimport Logo from \"../../Svg/bottom.svg\";\r\nimport \"./Wi.css\";\r\n\r\nfunction Bottom() {\r\n  return (\r\n    <div className=\"bottom\">\r\n      <img src={Logo} width=\"120\" height=\"120\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Bottom;\r\n","export default __webpack_public_path__ + \"static/media/Fog.64823203.svg\";","import React from \"react\";\r\nimport Ts from \"../../Svg/Fog.svg\";\r\nimport \"./Wi.css\";\r\nfunction Thunderstorm() {\r\n  return (\r\n    <div className=\"ts\">\r\n      <img src={Ts} width=\"150\" height=\"150\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Thunderstorm;\r\n","export default __webpack_public_path__ + \"static/media/noresult.f18512b2.png\";","import React from \"react\";\r\nimport Result from \"../../Svg/noresult.png\";\r\nfunction Noresult() {\r\n  return (\r\n    <div>\r\n      <img src={Result} width=\"100\" height=\"100\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Noresult;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Css.css\";\r\nimport Footer from \"./Wi/Footer\";\r\nimport Bottom from \"./Wi/Bottom\";\r\nimport LocationOnOutlinedIcon from \"@material-ui/icons/LocationOnOutlined\";\r\nimport Ts from \"./Wi/Thunderstorm\";\r\nimport Noresult from \"./Wi/Noresult\";\r\n\r\nfunction Html() {\r\n  const [location, setLocation] = useState(null);\r\n  const [city, setCity] = useState(\"New Delhi\");\r\n  const [country, setCountry] = useState();\r\n  const [weather, setWeather] = useState();\r\n  const [sunrise, setSunrise] = useState();\r\n  const [sunset, setSunset] = useState();\r\n  const [name, setName] = useState();\r\n  const srise = sunrise;\r\n  // Create a new JavaScript Date object based on the timestamp\r\n  // multiplied by 1000 so that the argument is in milliseconds, not seconds.\r\n  var date = new Date(srise * 1000);\r\n  // Hours part from the timestamp\r\n  var hours = date.getHours();\r\n  // Minutes part from the timestamp\r\n  var minutes = \"0\" + date.getMinutes();\r\n  // Seconds part from the timestamp\r\n  var seconds = \"0\" + date.getSeconds();\r\n\r\n  // Will display time in 10:30:23 format\r\n  var sr = hours + \":\" + minutes.substr(-2) + \":\" + seconds.substr(-2);\r\n\r\n  const sset = sunset;\r\n  // Create a new JavaScript Date object based on the timestamp\r\n  // multiplied by 1000 so that the argument is in milliseconds, not seconds.\r\n  var date = new Date(sset * 1000);\r\n  // Hours part from the timestamp\r\n  var hours = date.getHours();\r\n  // Minutes part from the timestamp\r\n  var minutes = \"0\" + date.getMinutes();\r\n  // Seconds part from the timestamp\r\n  var seconds = \"0\" + date.getSeconds();\r\n\r\n  // Will display time in 10:30:23 format\r\n  var ss = hours + \":\" + minutes.substr(-2) + \":\" + seconds.substr(-2);\r\n\r\n  const Months = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n\r\n  const Weekdays = [\"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thur\", \"Fri\", \"Sat\"];\r\n  var Month = Months[date.getMonth()];\r\n  var Weekday = Weekdays[date.getDay()];\r\n\r\n  var today = new Date(),\r\n    date =\r\n      Weekday +\r\n      \" \" +\r\n      Month +\r\n      \" \" +\r\n      today.getDate() +\r\n      \" \" +\r\n      today.getFullYear() +\r\n      \",\";\r\n  const time = today.getHours() + \":\" + today.getMinutes();\r\n  const Url = useEffect(() => {\r\n    const fetchUrl = async () => {\r\n      const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=d686bdf012cea1b3b4050adf53dfdb64`;\r\n      const response = await fetch(url);\r\n      const resJson = await response.json();\r\n      setLocation(resJson.main);\r\n      setCountry(resJson.sys.country);\r\n      setWeather(resJson.weather[0].description);\r\n      setSunrise(resJson.sys.sunrise);\r\n      setSunset(resJson.sys.sunset);\r\n      setName(resJson.name);\r\n    };\r\n    fetchUrl();\r\n  }, [city]);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div className=\"search\">\r\n          <input\r\n            value={city}\r\n            type=\"search\"\r\n            onChange={(e) => {\r\n              setCity(e.target.value);\r\n            }}\r\n            placeholder=\"Search Location\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {!location ? (\r\n        <p className=\"nodata\">\r\n          <Noresult /> no data found\r\n        </p>\r\n      ) : (\r\n        <div className=\"text\">\r\n          <Bottom />\r\n\r\n          <Footer />\r\n          <div className=\"city\">\r\n            {name}, {country}\r\n            <span className=\"pin\">\r\n              <LocationOnOutlinedIcon />\r\n            </span>\r\n          </div>\r\n          <div className=\"temp\">{Math.round(`${location.temp}`)}°C</div>\r\n          <div>\r\n            <Ts />\r\n          </div>\r\n          <div className=\"desc\">{weather},</div>\r\n          <div className=\"pressure\">Pressure:</div>\r\n          <div className=\"feelpressure\">{location.pressure / 100} Pa</div>\r\n\r\n          <div className=\"date\">\r\n            {date}\r\n            <br />\r\n            {time} Hrs\r\n          </div>\r\n\r\n          <div className=\"feelslike\">Feels Like: </div>\r\n          <div className=\"feeltemp\">{location.feels_like}°C</div>\r\n\r\n          <div className=\"left\">\r\n            <span className=\"dawn\">Dawn: </span>\r\n            <span className=\"bold\">{sr} Hrs</span>\r\n          </div>\r\n          <div className=\"right\">\r\n            <span className=\"dusk\">Dusk:</span>\r\n            <span className=\"bold\"> {ss} Hrs</span>\r\n          </div>\r\n          <div className=\"copyright\">\r\n            Copyright ©2021 All rights reserved. /GAURAV.SINHA\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Html;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../../Ui/Css.css\";\r\nimport Footer from \"./Footer\";\r\nimport Bottom from \"./Bottom\";\r\nimport LocationOnOutlinedIcon from \"@material-ui/icons/LocationOnOutlined\";\r\nimport Ts from \"./Thunderstorm\";\r\nimport Geolocation from \"react-geolocation\";\r\n\r\nfunction Html() {\r\n  const [location, setLocation] = useState(null);\r\n  const [country, setCountry] = useState();\r\n  const [weather, setWeather] = useState();\r\n  const [sunrise, setSunrise] = useState();\r\n  const [sunset, setSunset] = useState();\r\n  const [name, setName] = useState();\r\n\r\n  const [lon, setLon] = useState();\r\n  const [lat, setLat] = useState();\r\n  const srise = sunrise;\r\n  // Create a new JavaScript Date object based on the timestamp\r\n  // multiplied by 1000 so that the argument is in milliseconds, not seconds.\r\n  var date = new Date(srise * 1000);\r\n  // Hours part from the timestamp\r\n  var hours = date.getHours();\r\n  // Minutes part from the timestamp\r\n  var minutes = \"0\" + date.getMinutes();\r\n  // Seconds part from the timestamp\r\n  var seconds = \"0\" + date.getSeconds();\r\n\r\n  // Will display time in 10:30:23 format\r\n  var sr = hours + \":\" + minutes.substr(-2) + \":\" + seconds.substr(-2);\r\n\r\n  const sset = sunset;\r\n  // Create a new JavaScript Date object based on the timestamp\r\n  // multiplied by 1000 so that the argument is in milliseconds, not seconds.\r\n  var date = new Date(sset * 1000);\r\n  // Hours part from the timestamp\r\n  var hours = date.getHours();\r\n  // Minutes part from the timestamp\r\n  var minutes = \"0\" + date.getMinutes();\r\n  // Seconds part from the timestamp\r\n  var seconds = \"0\" + date.getSeconds();\r\n\r\n  // Will display time in 10:30:23 format\r\n  var ss = hours + \":\" + minutes.substr(-2) + \":\" + seconds.substr(-2);\r\n\r\n  const Months = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n\r\n  const Weekdays = [\"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thur\", \"Fri\", \"Sat\"];\r\n  var Month = Months[date.getMonth()];\r\n  var Weekday = Weekdays[date.getDay()];\r\n\r\n  var today = new Date(),\r\n    date =\r\n      Weekday +\r\n      \" \" +\r\n      Month +\r\n      \" \" +\r\n      today.getDate() +\r\n      \" \" +\r\n      today.getFullYear() +\r\n      \",\";\r\n  const time = today.getHours() + \":\" + today.getMinutes();\r\n  useEffect(() => {\r\n    const fetchUrl = async () => {\r\n      const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=d686bdf012cea1b3b4050adf53dfdb64`;\r\n      const response = await fetch(url);\r\n      const resJson = await response.json();\r\n      setLocation(resJson.main);\r\n      setCountry(resJson.sys.country);\r\n      setWeather(resJson.weather[0].description);\r\n      setSunrise(resJson.sys.sunrise);\r\n      setSunset(resJson.sys.sunset);\r\n      setName(resJson.name);\r\n    };\r\n    fetchUrl();\r\n  }, [lat, lon]);\r\n\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      <Geolocation\r\n        render={({\r\n          fetchingPosition,\r\n          position: { coords: { latitude, longitude } = {} } = {},\r\n          error,\r\n          getCurrentPosition,\r\n        }) => (\r\n          <div>\r\n            {error && <div>{error.message}</div>}\r\n            <pre>\r\n              {setLat(`${latitude}`)}\r\n              {setLon(`${longitude}`)}\r\n            </pre>\r\n          </div>\r\n        )}\r\n      />\r\n      <div className=\"text\">\r\n        <Bottom />\r\n\r\n        <Footer />\r\n        <div className=\"city\">\r\n          {name}, {country}\r\n          <span className=\"pin\">\r\n            <LocationOnOutlinedIcon />\r\n          </span>\r\n        </div>\r\n        <div className=\"temp\">{Math.round(`${location.temp}`)}°C</div>\r\n        <div>\r\n          <Ts />\r\n        </div>\r\n        <div className=\"desc\">{weather},</div>\r\n        <div className=\"pressure\">Pressure:</div>\r\n        <div className=\"feelpressure\">{location.pressure / 100} Pa</div>\r\n\r\n        <div className=\"date\">\r\n          {date}\r\n          <br />\r\n          {time} Hrs\r\n        </div>\r\n\r\n        <div className=\"feelslike\">Feels Like: </div>\r\n        <div className=\"feeltemp\">{location.feels_like}°C</div>\r\n\r\n        <div className=\"left\">\r\n          <span className=\"dawn\">Dawn: </span>\r\n          <span className=\"bold\">{sr} Hrs</span>\r\n        </div>\r\n        <div className=\"right\">\r\n          <span className=\"dusk\">Dusk:</span>\r\n          <span className=\"bold\"> {ss} Hrs</span>\r\n        </div>\r\n        <div className=\"copyright\">\r\n          Copyright ©2021 All rights reserved. /GAURAV.SINHA\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Html;\r\n","import \"./App.css\";\nimport React from \"react\";\nimport Html from \"./Ui/Html\";\nimport Geoloc from \"./Ui/Wi/Geoloc\";\nimport { Route, Switch, Link } from \"react-router-dom\";\nimport MyLocationIcon from \"@material-ui/icons/MyLocation\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <span className=\"icon\">\n        <Link to=\"geolocation\">\n          <MyLocationIcon />\n        </Link>\n      </span>\n      <Switch>\n        <Route exact path=\"/\" component={Html} />\n        <Route exact path=\"/geolocation\" component={Geoloc} />\n        <Route path=\"/weather-app\" component={Geoloc} />\n\n        <Route path=\"/\" component={Html} />\n      </Switch>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}