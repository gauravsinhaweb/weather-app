{"version":3,"sources":["Svg/footer.svg","Ui/Wi/Footer.js","Svg/bottom.svg","Ui/Wi/Bottom.js","Svg/Fog.svg","Ui/Wi/Thunderstorm.js","Svg/noresult.png","Ui/Wi/Noresult.js","Ui/Wi/Geoloc.jsx","App.js","reportWebVitals.js","index.js"],"names":["Img","className","src","Logo","width","height","Bottom","Thunderstorm","Ts","Noresult","Html","useState","location","setLocation","country","setCountry","weather","setWeather","sunrise","setSunrise","sunset","setSunset","name","setName","lon","setLon","lat","setLat","hours","date","Date","getHours","minutes","getMinutes","seconds","getSeconds","sr","substr","ss","d","weekday","Array","month","m","getUTCMonth","n","getDay","today","getDate","getFullYear","time","useEffect","a","url","fetch","response","json","resJson","main","sys","description","console","log","fetchUrl","render","fetchingPosition","position","coords","latitude","longitude","error","getCurrentPosition","message","Footer","Math","round","temp","pressure","feels_like","App","Geoloc","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e863365.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/footer.da2f300f.svg\";","import React from \"react\";\r\nimport Logo from \"../../Svg/footer.svg\";\r\nimport \"./Wi.css\";\r\n\r\nfunction Img() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <img src={Logo} width=\"460\" height=\"200\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Img;\r\n","export default __webpack_public_path__ + \"static/media/bottom.2c988092.svg\";","import React from \"react\";\r\nimport Logo from \"../../Svg/bottom.svg\";\r\nimport \"./Wi.css\";\r\n\r\nfunction Bottom() {\r\n  return (\r\n    <div className=\"bottom\">\r\n      <img src={Logo} width=\"120\" height=\"120\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Bottom;\r\n","export default __webpack_public_path__ + \"static/media/Fog.64823203.svg\";","import React from \"react\";\r\nimport Ts from \"../../Svg/Fog.svg\";\r\nimport \"./Wi.css\";\r\nfunction Thunderstorm() {\r\n  return (\r\n    <div className=\"ts\">\r\n      <img src={Ts} width=\"150\" height=\"150\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Thunderstorm;\r\n","export default __webpack_public_path__ + \"static/media/noresult.f18512b2.png\";","import React from \"react\";\r\nimport Result from \"../../Svg/noresult.png\";\r\nfunction Noresult() {\r\n  return (\r\n    <div>\r\n      <img src={Result} width=\"100\" height=\"100\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Noresult;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../../Ui/Css.css\";\r\nimport Footer from \"./Footer\";\r\nimport Bottom from \"./Bottom\";\r\nimport LocationOnOutlinedIcon from \"@material-ui/icons/LocationOnOutlined\";\r\nimport Ts from \"./Thunderstorm\";\r\nimport Geolocation from \"react-geolocation\";\r\n\r\nfunction Html() {\r\n  const [location, setLocation] = useState(null);\r\n  const [country, setCountry] = useState();\r\n  const [weather, setWeather] = useState();\r\n  const [sunrise, setSunrise] = useState();\r\n  const [sunset, setSunset] = useState();\r\n  const [name, setName] = useState();\r\n\r\n  const [lon, setLon] = useState();\r\n  const [lat, setLat] = useState();\r\n  const srise = sunrise;\r\n  // Create a new JavaScript Date object based on the timestamp\r\n  // multiplied by 1000 so that the argument is in milliseconds, not seconds.\r\n  var date = new Date(srise * 1000);\r\n  // Hours part from the timestamp\r\n  var hours = date.getHours();\r\n  // Minutes part from the timestamp\r\n  var minutes = \"0\" + date.getMinutes();\r\n  // Seconds part from the timestamp\r\n  var seconds = \"0\" + date.getSeconds();\r\n\r\n  // Will display time in 10:30:23 format\r\n  var sr = hours + \":\" + minutes.substr(-2) + \":\" + seconds.substr(-2);\r\n\r\n  const sset = sunset;\r\n  // Create a new JavaScript Date object based on the timestamp\r\n  // multiplied by 1000 so that the argument is in milliseconds, not seconds.\r\n  var date = new Date(sset * 1000);\r\n  // Hours part from the timestamp\r\n  var hours = date.getHours();\r\n  // Minutes part from the timestamp\r\n  var minutes = \"0\" + date.getMinutes();\r\n  // Seconds part from the timestamp\r\n  var seconds = \"0\" + date.getSeconds();\r\n\r\n  // Will display time in 10:30:23 format\r\n  var ss = hours + \":\" + minutes.substr(-2) + \":\" + seconds.substr(-2);\r\n\r\n  var d = new Date();\r\n  var weekday = new Array(7);\r\n  weekday[0] = \"Sun\";\r\n  weekday[1] = \"Mon\";\r\n  weekday[2] = \"Tues\";\r\n  weekday[3] = \"Wedn\";\r\n  weekday[4] = \"Thurs\";\r\n  weekday[5] = \"Fri\";\r\n  weekday[6] = \"Sat\";\r\n  var month = new Array(12);\r\n  month[0] = \"Jan\";\r\n  month[1] = \"Feb\";\r\n  month[2] = \"Mar\";\r\n  month[3] = \"Apr\";\r\n  month[4] = \"May\";\r\n  month[5] = \"Jun\";\r\n  month[6] = \"Jul\";\r\n  month[7] = \"Aug\";\r\n  month[8] = \"Sep\";\r\n  month[9] = \"Oct\";\r\n  month[10] = \"Nov\";\r\n  month[11] = \"Dec\";\r\n\r\n  var m = month[d.getUTCMonth()];\r\n  var n = weekday[d.getDay()];\r\n  var today = new Date(),\r\n    date =\r\n      n + \" \" + m + \" \" + today.getDate() + \" \" + today.getFullYear() + \",\";\r\n  const time = today.getHours() + \":\" + today.getMinutes();\r\n  useEffect(() => {\r\n    const fetchUrl = async () => {\r\n      const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=d686bdf012cea1b3b4050adf53dfdb64`;\r\n      const response = await fetch(url);\r\n      const resJson = await response.json();\r\n      setLocation(resJson.main);\r\n      setCountry(resJson.sys.country);\r\n      setWeather(resJson.weather[0].description);\r\n      setSunrise(resJson.sys.sunrise);\r\n      setSunset(resJson.sys.sunset);\r\n      setName(resJson.name);\r\n      console.log(resJson);\r\n    };\r\n    fetchUrl();\r\n  }, [lat, lon]);\r\n\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      <Geolocation\r\n        render={({\r\n          fetchingPosition,\r\n          position: { coords: { latitude, longitude } = {} } = {},\r\n          error,\r\n          getCurrentPosition,\r\n        }) => (\r\n          <div>\r\n            {error && <div>{error.message}</div>}\r\n            <pre>\r\n              {setLat(`${latitude}`)}\r\n              {setLon(`${longitude}`)}\r\n            </pre>\r\n          </div>\r\n        )}\r\n      />\r\n      <div className=\"text\">\r\n        <Bottom />\r\n\r\n        <Footer />\r\n        <div className=\"city\">\r\n          {name}, {country}\r\n          <span className=\"pin\">\r\n            <LocationOnOutlinedIcon />\r\n          </span>\r\n        </div>\r\n        <div className=\"temp\">{Math.round(`${location.temp}`)}Â°C</div>\r\n        <div>\r\n          <Ts />\r\n        </div>\r\n        <div className=\"desc\">{weather},</div>\r\n        <div className=\"pressure\">Pressure:</div>\r\n        <div className=\"feelpressure\">{location.pressure / 100} Pa</div>\r\n\r\n        <div className=\"date\">\r\n          {date}\r\n          <br />\r\n          {time} Hrs\r\n        </div>\r\n\r\n        <div className=\"feelslike\">Feels Like: </div>\r\n        <div className=\"feeltemp\">{location.feels_like}Â°C</div>\r\n\r\n        <div className=\"left\">\r\n          <span className=\"dawn\">Dawn: </span>\r\n          <span className=\"bold\">{sr} Hrs</span>\r\n        </div>\r\n        <div className=\"right\">\r\n          <span className=\"dusk\">Dusk:</span>\r\n          <span className=\"bold\"> {ss} Hrs</span>\r\n        </div>\r\n        <div className=\"copyright\">\r\n          Copyright Â©2021 All rights reserved. /GAURAV.SINHA\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Html;\r\n","import \"./App.css\";\nimport React from \"react\";\nimport Html from \"./Ui/Html\";\nimport Geoloc from \"./Ui/Wi/Geoloc\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Geoloc />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}